{"description":"Call to static methods can not change change the values of class fields, if they are not static themselves. Consequently, constraints on non-static fields should not be reset when invoking static methods.\r\n\r\nSimilarly, final method {{java.lang.Object#getClass()}}, is not static, but can not change value of fields. It\u0027s invocation should therefore not reset values of fields.\r\n\r\nResetting values on fields in such cases causes FPs on RSPEC-3655, and FNs on RSPEC-2589 and RSPEC-2259.\r\n\r\nNote: the reset of the {{Optional}} constraints causes any subsequent call to {{get()}} to raise FPs, when we should kill any FP and stop tracking it (as for the other rules). Maybe the resetting process of this constraint should be updated to not make noise after a reset (consider as being _PRESENT_ instead of _NO_CONSTRAINT_?).\r\n\r\n{code}\r\nclass A {\r\n  boolean b;\r\n  Object o;\r\n  java.util.Optional\u003cString\u003e op;\r\n\r\n  void bar() {\r\n    if (b) {\r\n      getClass();\r\n      if (b) { } // FN S2589 - condition always true\r\n    }\r\n\r\n    if (o \u003d\u003d null) {\r\n      this.getClass();\r\n      o.toString(); // FN S2259 - null dereference\r\n    }\r\n\r\n    if (op.isPresent()) {\r\n      foo();\r\n      op.get(); // FP S3655 - Optional get() before isPresent()\r\n    }\r\n  }\r\n\r\n  public static void foo() {\r\n    // do something\r\n  }\r\n\r\n}\r\n{code}","component":"SonarJava","component_version":"4.12"}