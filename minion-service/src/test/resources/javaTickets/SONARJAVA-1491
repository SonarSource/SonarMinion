{"description":"In multithreaded environment fields can be modified when the current thread is called to wait. Therefore when a wait call is detected, constraints on field should be reset as we can not know for sure what was modified after. \r\n\r\n{code}\r\npublic abstract class FpS2583 implements Runnable {\r\n\r\n  private final Object monitor \u003d new Object();\r\n  private boolean shutdown;\r\n\r\n  public void stop() {\r\n    synchronized(monitor) {\r\n      shutdown \u003d true;\r\n      monitor.notifyAll();\r\n    }\r\n  }\r\n\r\n  public void run() {\r\n    boolean abort \u003d false;\r\n    while (!abort) {\r\n      try {\r\n        synchronized (monitor) {\r\n          long delay \u003d 1000L;\r\n          while (!shutdown \u0026\u0026 delay \u003e 0) {\r\n            long now \u003d System.currentTimeMillis();\r\n            monitor.wait(delay);\r\n            delay -\u003d (System.currentTimeMillis() - now);\r\n          }\r\n          if (shutdown) {\r\n            abort \u003d true;\r\n          }\r\n          doSomething(); // may throw an exception\r\n        }\r\n\r\n      } catch (RuntimeException e) {\r\n        if (abort) { // \u003c------------------------------------- S2583: Change this condition so that it does not always evaluate to \"false\"\r\n          System.out.println(\"Abort\");\r\n        } else {\r\n          System.out.println(\"Retry\");\r\n        }\r\n      } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected abstract void doSomething();\r\n}\r\n{code}","component":"SonarJava","component_version":"3.13"}