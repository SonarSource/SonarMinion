{"description":"Symbolic value created from binary expression (i.e. {{*,/,%,+,-, \u003c\u003c , \u003e\u003e , \u003e\u003e\u003e , \u0026 , | , ^ , \u003e, \u003e\u003d, \u003d\u003d , \u003c\u003d , \u003c\u003d}} ) should have {{NOT_NULL}} constraint , because result of such operation is never {{null}}.\r\n\r\nNot having a {{NOT_NULL}} constraint on result of binary expression will lead to evaluating impossible branching in following code, where condition can\u0027t be false.\r\n\r\n{code}\r\nvoid test(String s) {\r\n    Boolean bool \u003d s !\u003d null;\r\n    if (bool !\u003d null) {\r\n\r\n    }\r\n  }\r\n{code}\r\nSuch evaluation can lead to infinite recursion.\r\n\r\nNote, this issue is not trying to handle possible null pointer exception when unboxing null value from the wrapper object, like\r\n{code}\r\nInteger i \u003d null; \r\nInteger j \u003d 5; \r\nInteger sum \u003d i + j;\r\n{code}\r\n\r\nThis ticket is not handling the fact that this addition leads to null pointer exception, which is a goal of MMF-859, but it will handle the fact that {{sum}} should have {{NOT_NULL}} constraint after addition.","component":"SonarJava","component_version":"4.15"}