{"description":"In the following code, we correctly defer the resolution of the variable initializer type, but we never apply the substitution to the un-inferred type.\r\n\r\n{code}\r\nSet\u003cString\u003e immutableSet \u003d\r\n  ImmutableSet.of(); // deferred type, which should become ImmutableSet\u003cString\u003e, but become Set\u003cString\u003e after inference\r\n{code}\r\n\r\nSee: https://github.com/SonarSource/sonar-java/blob/4.3.0.7717/java-frontend/src/main/java/org/sonar/java/resolve/TypeAndReferenceSolver.java#L301\r\n\r\nThis correct resolution of the type of the initializer expression is important for rules such as : RSPEC-2386 which relates on the type hierarchy to make some exclusion.\r\n(in this case if the initializer is resolved as a Set\u003cString\u003e and not an ImmutableSet RSPEC-2386 will raise an issue)","component":"SonarJava","component_version":"4.9"}