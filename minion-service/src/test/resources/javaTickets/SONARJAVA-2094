{"description":"When resolving a method invocation to its symbol, the method resolution algorithm is going to search from parent class to parent class. If the method is not found, then the algorithm retry with autoboxing, causing to explore the whole hierarchy {{n!}} times, with {{n}} being the number of class in the hierarchy... with a significant impact on performances:\r\n\r\n{code}\r\nclass A1 {\r\n // ...\r\n}\r\n\r\nclass A2 extends A1 {\r\n // ...\r\n}\r\n\r\nclass A3 extends A2 {\r\n // ...\r\n}\r\n\r\nclass A4 extends A3 {\r\n  void foo() {\r\n    bar(); // method to resolve\r\n  }\r\n}\r\n{code}\r\n\r\nSearching to resolve {{bar}} should imply an exploration order as follow (\"searching in\"):\r\n{code}\r\nA4\r\nA3\r\nA2\r\nA1\r\nObject\r\n{code}\r\n\r\nBut the following exploration stack occurs (\"searching in\"):\r\n{code}\r\nA4\r\nA3\r\nA2\r\nA1\r\nObject\r\nObject\r\nA1\r\nObject\r\nObject\r\nA2\r\nA1\r\nObject\r\nObject\r\nA1\r\nObject\r\nObject\r\nA3\r\nA2\r\nA1\r\nObject\r\nObject\r\n...\r\n{code}\r\n","component":"SonarJava","component_version":"4.6"}