{"description":"{code}\npublic class X\u003cT\u003e {\n\n  InnerClass innerClass;\n\n  class InnerClass {\n    T method() {\n      return null;\n    }\n  }\n\n  static void test() {\n    new X\u003cY\u003e().innerClass.method().method1(); //method() is of type T therefore method1 is not found whereas innerClass should be a ParametrizedTypeType with same type substitution as its owner\n  }\n\n}\n\nclass Y {\n  void method1() {\n  }\n}\n{code}\n\nThis should also support deeper levels of nesting.","component":"SonarJava","component_version":""}