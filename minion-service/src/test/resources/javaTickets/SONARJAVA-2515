{"description":"In all the following methods, the CFG which is build is wrong. The {{break}} or {{continue}} statement within the body of the {{try}} should lead to the first element of the {{finally}} block, but it systematically lead to only the last statement: {{System.out.println(...)}}. This leads to wrong state in the stack of the generated program states, which are then unable to unstack the correct amount of elements. \r\n\r\n{code}\r\nclass InterruptedLoop {\r\n  void run1() {\r\n    while (true) {\r\n      try {\r\n        break;\r\n      } finally {\r\n        String s \u003d true ? \"\" : \"\";\r\n        System.out.println(s);\r\n      }\r\n    }\r\n  }\r\n\r\n  void run2() {\r\n    while (true) {\r\n      try {\r\n        continue;\r\n      } finally {\r\n        System.out.println(true ? \"\" : \"\");\r\n      }\r\n    }\r\n  }\r\n\r\n  void run3() {\r\n    for (int i \u003d 0; i \u003c 5; i++) {\r\n      try {\r\n        break;\r\n      } finally {\r\n        String s;\r\n        System.out.println(true ? \"\" : \"\");\r\n      }\r\n    }\r\n  }\r\n\r\n  void run4() {\r\n    while (true) {\r\n      try {\r\n        break;\r\n      } finally {\r\n        String s;\r\n        if (true) { s \u003d \"\"; } else { s \u003d \"\"; }\r\n        System.out.println(s);\r\n      }\r\n    }\r\n  }\r\n}\r\n{code}\r\n\r\nWhen looking at the graph, B5 should lead to B4, but it systematically leads to B1 (method invocation), which is wrong.\r\n\r\n!cfg.png|height\u003d512,width\u003d402!\r\n\r\n","component":"SonarJava","component_version":"5.1.1"}