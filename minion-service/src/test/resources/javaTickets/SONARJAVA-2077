{"description":"{code}\r\nimport java.util.List;\r\nimport com.google.common.collect.ImmutableList;\r\nimport java.util.ArrayList;\r\nimport static java.util.stream.Collectors.toList;\r\n\r\nclass NestedLambdas implements Issue{\r\n  private List\u003cList\u003cIssueLocation\u003e\u003e flows \u003d new ArrayList\u003c\u003e();\r\n\r\n  public List\u003cFlow\u003e flows() {\r\n    return this.flows.stream()\r\n      .\u003cFlow\u003emap(l -\u003e\r\n        () -\u003e ImmutableList.copyOf(l)) // resolving type of this lambda fails the analysis with IndexOutOfBoundsException\r\n      .collect(toList());\r\n  }\r\n}\r\npublic interface IssueLocation {}\r\n\r\npublic interface Issue {\r\n  interface Flow {\r\n    List\u003cIssueLocation\u003e locations();\r\n  }\r\n}\r\n{code}\r\n\r\nType of the nested lambda is not properly infered (the type of the parent lambda is infered, not its return type) leading to a wrong resolution of the SAM method in functional interface and leading to IndexOutOfBoundsException failing semantic analysis.","component":"SonarJava","component_version":"4.5"}