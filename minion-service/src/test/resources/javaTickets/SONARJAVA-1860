{"description":"In the following code, both method {{foo}} and {{bar}} encounter issue deducing the correct type of the parameter after resolving the method reference correctly.\r\n\r\n{code}\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nclass A {\r\n  void foo(B b) {\r\n    Optional.of(b)\r\n      .flatMap(A::flatipus1) // parameter type of flatMap should be Function\u003c? super B, Optional\u003cC\u003e\u003e, but it is resolved as Function\u003c? super B, Optional\u003cU\u003e\u003e\r\n      .flatMap(A::flatipus2);\r\n  }\r\n\r\n  private static Optional\u003cC\u003e flatipus1(B b) {\r\n    return Optional.empty();\r\n  }\r\n\r\n  private static Optional\u003cB\u003e flatipus2(C c) {\r\n    return Optional.empty();\r\n  }\r\n\r\n  void bar(List\u003cC\u003e cs) {\r\n    cs.stream()\r\n      .map(B.class::cast)\r\n      .filter(A::bool);\r\n  }\r\n\r\n  private static boolean bool(B b) {\r\n    return true;\r\n  }\r\n}\r\n\r\nclass B {}\r\nclass C extends B {}\r\n{code}","component":"SonarJava","component_version":"4.2.1"}