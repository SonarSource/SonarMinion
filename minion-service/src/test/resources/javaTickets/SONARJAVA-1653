{"description":"The {{Runnable}} interface, even if designed to be used in multi-threaded environment, can perfectly be used to define group of instruction which does not require to be used in different thread. The rule should therefore focus on subclasses of Thread.\r\n\r\nExample from google Guice:\r\n{code}\r\n  @Inject @Named(\"batchScope\")\r\n  SimpleScope scope;\r\n\r\n  /**\r\n   * Runs {@code runnable} in batch scope.\r\n   */\r\n  public void scopeRunnable(Runnable runnable) {\r\n    scope.enter();\r\n    try {\r\n      // explicitly seed some seed objects...\r\n      scope.seed(Key.get(SomeObject.class), someObject);\r\n\r\n      // create and access scoped objects\r\n      runnable.run();\r\n\r\n    } finally {\r\n      scope.exit();\r\n    }\r\n  }\r\n{code}","component":"SonarJava","component_version":"3.14"}