{"description":"When non-static methods are called during execution of a method, constraints associated to fields are reset. This prevent FPs from SE-based rules when other methods modify fields.\r\n\r\nThis mechanism should also work +when the field is not declared in the current file+ (inherited). Current implementation only reset fields which have non-null declarations (based on existence of {{VariableTree}}).\r\n\r\nExample of related issues on Sonarcloud (FP on S4165): https://sonarcloud.io/project/issues?id\u003dorg.jacoco%3Aorg.jacoco.build\u0026issues\u003dAV6C51pII7opDV7vZ_is\u0026open\u003dAV6C51pII7opDV7vZ_is\r\n\r\nReproducer: When field is part of current file, *NO* issues are raised.\r\n{code:title\u003dA.java}\r\npackage org.foo;\r\n\r\nclass A {\r\n  Object field;\r\n\r\n  boolean isThereANext() {\r\n    doSomething();\r\n    return field !\u003d null;\r\n  }\r\n\r\n  void doSomething() {\r\n    field \u003d new Object();\r\n  }\r\n}\r\n\r\nclass B extends A {\r\n  void doSemethingElse() {\r\n    Object o \u003d field;\r\n    while (isThereANext()) {\r\n      doSomething();\r\n      o \u003d field; // No FP S4165\r\n    }\r\n    field \u003d o;  // No FP S4165\r\n  }\r\n}\r\n{code}\r\n\r\nBut when the field which is used is defined outside current File, constraints are not reset, causing FPs:\r\n{code:title\u003dC.java}\r\npackage org.foo;\r\n\r\npublic class C extends A {\r\n  void doSemethingElse() {\r\n    Object o \u003d field;\r\n    while (isThereANext()) {\r\n      doSomething();\r\n      o \u003d field; // FP S4165\r\n    }\r\n    field \u003d o;  // FP S4165\r\n  }\r\n}\r\n{code}\r\n","component":"SonarJava","component_version":"4.15"}