{"description":"When we set boolean constraint on relational symbolic value we also derive all possible transitive relations as described in MMF-771 .\r\n\r\nThis is a recursive algorithm which stops when either of following is true:\r\n* resulting program state is impossible (i.e it would lead to contradiction like {{TRUE \u003d\u003d FALSE}})\r\n* transitive relation is already contained in the program state\r\n\r\nHowever, deduced transitive relationship is added to the program state only if at least one operand of the relationship is reachable from the program state. This can lead to following sequence of events:\r\n\r\n# new relation {{R}} is added to program state, set {{TRUE}} on {{R}}\r\n# derive all transitive relations, one of transitive relations contains {{R}} as operand, i.e. {{R \u003d\u003d SVx}}\r\n# none of {{R}} operands is reachable, {{R}} is not added to the program state\r\n# copy constraints on all new relations, leading to setting {{TRUE}} on {{R}} , which means call to step 1.\r\n\r\nBecause {{R}} is never added to the program state, but it is derived via transitive relations, this will lead to infinite recursion.\r\n\r\nExample of code which *can* trigger the issue\r\n{code}\r\n void test(Object param1, Object param2) {\r\n    String string1 \u003d param1 \u003d\u003d null ? null : param1.toString();\r\n    String string2 \u003d param2 \u003d\u003d null ? null : param2.toString();\r\n\r\n    Boolean bool1 \u003d string1 !\u003d null;\r\n    Boolean bool2 \u003d string2 !\u003d null;\r\n\r\n    if (bool1 !\u003d null) {\r\n\r\n    }\r\n    if (bool2 !\u003d null) {\r\n\r\n    }\r\n  }\r\n{code}\r\n\r\nNote that when evaluating last condition, symbolic values associated with {{string1}} and {{string2}} are unreachable. Also this code creates relational symbolic values where operands are themselves relational symbolic values like {{(string1 !\u003d null) \u003d\u003d null}} . \r\n\r\nSee also SONARJAVA-2474 which solves issue of missing knowledge when evaluating such condition","component":"SonarJava","component_version":"4.15"}