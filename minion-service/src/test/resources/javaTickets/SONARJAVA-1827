{"description":"{code}\r\npublic class Test {\r\n  private static void test(long toRevision, boolean inverted, Object visitor) {\r\n\r\n    testBlock: {\r\n      if (Math.random() \u003e 0.5)\r\n        break testBlock;\r\n      test(0, false ? inverted : !inverted, visitor);\r\n    }\r\n  }\r\n}\r\n{code}\r\n\r\nThe test method produces  the following CFG : \r\n\r\n{code}\r\n\r\nB6\r\n0:\tIDENTIFIER                          \tMath\r\n1:\tMETHOD_INVOCATION                   \tMath.random()\r\n2:\tDOUBLE_LITERAL                      \t0.5\r\n3:\tGREATER_THAN                        \tMath.random() \u003e 0.5\r\nT:\tIF_STATEMENT                        \tif (Math.random() \u003e 0.5)\r\n\tjumps to: B4(false) B5(true)\r\n\r\nB5\r\nT:\tBREAK_STATEMENT                     \tbreak\r\n\tjumps to: B1\r\n\r\nB4\r\n0:\tINT_LITERAL                         \t0\r\n1:\tBOOLEAN_LITERAL                     \tfalse\r\nT:\tCONDITIONAL_EXPRESSION              \tfalse ? inverted : !inverted\r\n\tjumps to: B2(false) B3(true)\r\n\r\nB3\r\n0:\tIDENTIFIER                          \tinverted\r\n\tjumps to: B1\r\n\r\nB2\r\n0:\tIDENTIFIER                          \tinverted\r\n1:\tLOGICAL_COMPLEMENT                  \t!inverted\r\n\tjumps to: B1\r\n\r\nB1\r\n0:\tIDENTIFIER                          \tvisitor\r\n1:\tIDENTIFIER                          \ttest\r\n2:\tMETHOD_INVOCATION                   \ttest(0,false ? inverted : !inverted,visitor)\r\n\tjumps to: B0\r\n\r\nB0 (Exit)\r\n{code}\r\nThe {{break}} statement wrongly jump to block b1 whereas in this case it should jump to the exit block of the method. \r\nThis shows that in this case a successor is missing.\r\n","component":"SonarJava","component_version":"4.2.1"}