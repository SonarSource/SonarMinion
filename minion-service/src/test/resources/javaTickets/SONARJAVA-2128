{"description":"From java.lang.Enum source code : \r\n\r\n{code}\r\n /**\r\n     * Sole constructor.  Programmers cannot invoke this constructor.\r\n     * It is for use by code emitted by the compiler in response to\r\n     * enum type declarations.\r\n     *\r\n     * @param name - The name of this enum constant, which is the identifier\r\n     *               used to declare it.\r\n     * @param ordinal - The ordinal of this enumeration constant (its position\r\n     *         in the enum declaration, where the initial constant is assigned\r\n     *         an ordinal of zero).\r\n     */\r\n    protected Enum(String name, int ordinal) {\r\n        this.name \u003d name;\r\n        this.ordinal \u003d ordinal;\r\n    }\r\n{code}\r\n\r\nThis is not properly supported in SonarJava semantic and can lead to FP on unused private method when defining an enum constructor with autoboxing : \r\n\r\n{code}\r\npublic enum ExampleEnum {\r\n\r\n    EXAMPLE(\"String\", 0);\r\n\r\n    private String string;\r\n    private Integer i;\r\n\r\n    ExampleEnum(String string, Integer i) { // unused private constructor because the constructor from the superclass was picked (strict invocation over loose invocation).\r\n        this.string \u003d string;\r\n        this.i \u003d i;\r\n    }\r\n\r\n    public String getString() {\r\n        return string;\r\n    }\r\n\r\n    public Integer getI() {\r\n        return i;\r\n    }\r\n}\r\n\r\n{code}\r\n","component":"SonarJava","component_version":"4.8"}