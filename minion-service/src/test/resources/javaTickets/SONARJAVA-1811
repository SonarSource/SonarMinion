{"description":"The 2nd operand of the {{Stream.reduce()}} method is a {{BinaryOperator\u003cT\u003e}}, so any method matching the {{FunctionalInterface}} should be resolved.\r\n\r\n{code}\r\nimport java.util.Optional;\r\nimport java.util.stream.Stream;\r\n\r\npublic class A {\r\n  public Optional\u003cInteger\u003e sum(Stream\u003cInteger\u003e stream) {\r\n    return stream.reduce(this::add);\r\n  }\r\n\r\n  private Integer add(Integer a, Integer b) { // the method is not resolved\r\n    return a + b;\r\n  }\r\n}\r\n{code}\r\n\r\nOther example (without Stream):\r\n{code}\r\nclass A {\r\n\r\n  void bar() {\r\n    B\u003cInteger\u003e b \u003d new B\u003c\u003e();\r\n    b.foo(this::add);\r\n  }\r\n\r\n  private Integer add(Integer a, Integer b) { // The method is not resolved\r\n    return a + b;\r\n  }\r\n}\r\n\r\nclass B\u003cT\u003e {\r\n  void foo(BinaryOperator\u003cT\u003e op) {\r\n  }\r\n}\r\n{code}","component":"SonarJava","component_version":"4.2"}