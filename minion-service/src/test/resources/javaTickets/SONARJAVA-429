{"description":"According to the Java specification:\n{quote}\n8.1.2 Inner Classes and Enclosing Instances\n\nAn inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (ÃÂ§8.7) or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (ÃÂ§15.28).\n\n{code}\npublic class NestingClass {\n  public class InnerClass {\n    private static final int POSSIBLE \u003d 4;\n    private static final String POSSIBLE_2 \u003d \"\";\n\n    private static final String[] NOT_POSSIBLE \u003d {};\n    private static final Object NOT_POSSIBLE_2 \u003d new Object();\n  }\n}\n{code}\n{quote}\n\nSo no issue should be reported on final field of inner classes whose type is not a primitive or a String. Rule specification has been updated.","component":"SonarJava","component_version":"2.1"}