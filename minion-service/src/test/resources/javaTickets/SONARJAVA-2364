{"description":"Following code will raise an FP on S2095 Unclosed resources when try-catch-finally is nested within try-catch\r\n\r\n{code}\r\ntry {\r\n  FileInputStream fis \u003d null;\r\n  try {\r\n    fis \u003d new FileInputStream(\"foobar.txt\"); // FP Close this \"FileInputStream\" in a \"finally\" clause\r\n    fis.read();\r\n  }\r\n  catch (IOException e) {\r\n    LOG.error(\"Exception reading from stream:\", e);   // catch block is linked to the outher catch skipping finally\r\n  }\r\n  finally {\r\n    if (fis !\u003d null) {\r\n      try {\r\n        fis.close();\r\n      }\r\n      catch (IOException e) {\r\n        LOG.error(\"Exception closing stream:\", e);\r\n      }\r\n    }\r\n  }\r\n}\r\ncatch (Exception e) {\r\n  LOG.error(\"Exception reading:\", e);\r\n}\r\n{code}\r\n\r\nThis is due to wrong CFG , consider following snippet\r\n\r\n{code}  \r\n    try {\r\n      try {\r\n        f();\r\n      } catch (Exception e) {\r\n        ex();\r\n      } finally {\r\n        fin();\r\n      }\r\n    } catch (Exception e) {\r\n      outEx();\r\n    }\r\n{code}\r\n\r\nIf exception is thrown in catch block in call to {{ex()}} the path goes to the outer catch and not to the finally block as it should.","component":"SonarJava","component_version":"4.12"}