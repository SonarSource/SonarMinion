{"description":"Here is a dummy class where we try to confirm SONAR is able to detect bad usage of \"throw new Exception\":\n\n{code}\npublic class ExceptionTest {\n\n  public int buildTransferAgentTrade(String param1, String param2) throws Exception, Throwable {\n\n    boolean myValue \u003d true;\n    if (myValue) {\n      throw new RuntimeException();\n    }\n    myValue \u003d true;\n    if (myValue) {\n      throw new Exception();\n    }\n    myValue \u003d true;\n    if (myValue) {\n      throw new Exception(\"a value\");\n    }\n    try {\n    } catch (Exception e) {\n      throw new Exception(\"Error while loading trades\", e);\n    }\n    myValue \u003d true;\n    if (myValue) {\n      throw new Throwable();\n    }\n    myValue \u003d true;\n    if (myValue) {\n      throw new Error();\n    }\n    try {\n      String nothing \u003d \"notGood\";\n      if (\"notGood\".equalsIgnoreCase(nothing)) {\n        throw new RemoteException(\"notGood\");\n      }\n    } catch (RemoteException e) {\n      throw new Exception(e);\n    }\n\n    return 1;\n  }\n}\n{code}\n\nWhen we run the analysis, SONAR is not able to detect the 3 \"throw new Exception\" whereas in some case we have seen it was able to.\nTo confirm that please have a look at the attached screenshot.\n\nIn the documentation of the rule \"Avoid Throwing Raw Exception Types\" it\u0027s written:\n{quote}\nAvoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.\n{quote}\nThat\u0027s why in our test class, you will find use case of RuntimeException, Throwable, Exception and Error.\n","component":"SonarJava","component_version":"1.3"}