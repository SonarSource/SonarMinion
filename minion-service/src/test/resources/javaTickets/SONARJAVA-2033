{"description":"This bad computation of function type can lead to false positive in unused private method by badly resolving lambdas and reference. \r\n\r\n\r\nJLS reference :  http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.9 \r\nReproducer : \r\n{code}\r\nimport java.util.Collection;\r\n\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.scene.control.CheckBox;\r\nimport javafx.scene.layout.HBox;\r\n\r\npublic class SonarQubeTest14\r\n{\r\n    public void process(Collection\u003cHBox\u003e bibInputs)\r\n    {\r\n        for (HBox entry : bibInputs)\r\n        {\r\n            ((CheckBox) entry.getChildren()\r\n                             .get(0)).selectedProperty()\r\n                                     .addListener(this::method2); // Usage\r\n        }\r\n    }\r\n\r\n    public void process2(Collection\u003cHBox\u003e bibInputs)\r\n    {\r\n        for (HBox entry : bibInputs)\r\n        {\r\n            ((CheckBox) entry.getChildren()\r\n                             .get(0)).selectedProperty()\r\n                                     .addListener((a, b, c) -\u003e method2(a, b, c)); // Usage\r\n        }\r\n    }\r\n\r\n    // SonarQube reports an unused private method here\r\n    private void method2(ObservableValue\u003c? extends Boolean\u003e observable, Boolean oldValue,\r\n            Boolean newValue)\r\n    {\r\n\r\n    }\r\n}\r\n\r\n{code}\r\n\r\nto reproduce in unused private method test, don\u0027t forget to include jfxrt jar in classpath :\r\n{code}\r\nJavaCheckVerifier.verify(\"~/testfile.java\", new UnusedPrivateMethodCheck(), Lists.newArrayList(new File(\"/usr/lib/jvm/java-8-oracle/jre/lib/ext/jfxrt.jar\")));\r\n{code}\r\n","component":"SonarJava","component_version":"4.5"}