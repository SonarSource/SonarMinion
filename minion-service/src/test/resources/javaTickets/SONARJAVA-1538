{"description":"In the following piece of code the catch blocks predecessor ends up wrong. \r\n{code}\r\nvoid fun(boolean abort) {\r\nwhile (!abort) {\r\n      try {\r\n        synchronized (monitor) {\r\n          long delay \u003d 1000L;\r\n          while (!shutdown \u0026\u0026 delay \u003e 0) {\r\n            long now \u003d System.currentTimeMillis();\r\n            monitor.wait(delay);\r\n            delay -\u003d (System.currentTimeMillis() - now);\r\n          }\r\n          if (shutdown) {\r\n            abort \u003d true;\r\n          }\r\n          doSomething(); // may throw an exception\r\n        }\r\n\r\n      } catch (RuntimeException e) {\r\n        if (abort) { // \u003c------------------------------------- S2583: Change this condition so that it does not always evaluate to \"false\"\r\n          System.out.println(\"Abort\");\r\n        } else {\r\n          System.out.println(\"Retry\");\r\n        }\r\n      } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n      }\r\n}\r\n{code}\r\n\r\nThis leads to wrong issues in SE because the paths are wrong. \r\n\r\nProblem seems to come from the fact that catches blocks are not hooked up to the last statement of the try block. ","component":"SonarJava","component_version":"3.12"}