{"description":"When generating method behaviors from bytecode (only knowing the signature of the targeted methods, not the symbol), we can end up calling {{static}} {{native}} methods. Problem is that, we will generate a method behavior for every static methods, and then try to use it.\r\n\r\nOnly method behaviors of non-overrideable methods should be used.\r\n\r\nExample causing issues:\r\n# analyzing code source of Foo.java\r\n# hitting method invocation {{bar()}}, static method, trigger generation of method behavior from bytecode for {{bar()}}\r\n# hitting {{check()}} from bytecode inside body of {{Bar()}}, trying to follow the {{INVOKESTATIC}} instruction to generate its own method behavior\r\n# getting for method {{check()}} a invalid method behavior which should not be used\r\n\r\n{code:title\u003dFoo.java}\r\nclass Foo() {\r\n  void foo() {\r\n    Bar.bar();\r\n  }\r\n}\r\n{code}\r\n\r\n{code:title\u003dBar.java}\r\nclass Bar() {\r\n  static boolean bar() {\r\n    if (check()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static native boolean check(); \r\n}\r\n{code}","component":"SonarJava","component_version":"4.15"}