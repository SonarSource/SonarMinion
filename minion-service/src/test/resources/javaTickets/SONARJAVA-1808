{"description":"The following code causes the DivisionByZero check to corrupt the stack when reusing symbolic values.\r\n\r\n{code}\r\nprivate void decodeBigInteger(int value) throws Exception {\r\n    boolean done \u003d false;\r\n    while (!done) {\r\n      long lowBits \u003d 0;\r\n      while (value \u003e 0 \u0026\u0026 !done) {\r\n        int b \u003d value \u0026 0xFF;\r\n        if (b \u003d\u003d 0) {\r\n          done \u003d true;\r\n          if (lowBits \u003d\u003d 0) {\r\n            // do something\r\n          }\r\n        } else if (b !\u003d 0xFF) {\r\n          if (value \u003d\u003d 1) {\r\n            int digit \u003d (b \u003e\u003e\u003e 4) \u0026 0x0F;\r\n            lowBits \u003d lowBits * 10 + digit;\r\n          }\r\n        }\r\n        value++;\r\n      }\r\n        lowBits \u003d -lowBits; // the creation of the symbolic value associated to the unary expression raise a IllegalArgumentException\r\n    }\r\n  }\r\n{code}\r\n\r\nstack trace: \r\n\r\n{code}\r\nCaused by: java.lang.IllegalArgumentException\r\n\tat com.google.common.base.Preconditions.checkArgument(Preconditions.java:108)\r\n\tat org.sonar.java.se.symbolicvalues.BinarySymbolicValue.computedFrom(BinarySymbolicValue.java:49)\r\n\tat org.sonar.java.se.ExplodedGraphWalker.executeUnaryExpression(ExplodedGraphWalker.java:576)\r\n\tat org.sonar.java.se.ExplodedGraphWalker.visit(ExplodedGraphWalker.java:423)\r\n\tat org.sonar.java.se.ExplodedGraphWalker.execute(ExplodedGraphWalker.java:189)\r\n\tat org.sonar.java.se.ExplodedGraphWalker.visitMethod(ExplodedGraphWalker.java:153)\r\n\tat org.sonar.java.model.declaration.MethodTreeImpl.accept(MethodTreeImpl.java:218)\r\n\tat org.sonar.java.se.SymbolicExecutionVisitor.visitNode(SymbolicExecutionVisitor.java:49)\r\n\tat org.sonar.java.ast.visitors.SubscriptionVisitor.visit(SubscriptionVisitor.java:95)\r\n\tat org.sonar.java.ast.visitors.SubscriptionVisitor.visitChildren(SubscriptionVisitor.java:120)\r\n\tat org.sonar.java.ast.visitors.SubscriptionVisitor.visit(SubscriptionVisitor.java:97)\r\n\tat org.sonar.java.ast.visitors.SubscriptionVisitor.visitChildren(SubscriptionVisitor.java:120)\r\n\tat org.sonar.java.ast.visitors.SubscriptionVisitor.visit(SubscriptionVisitor.java:97)\r\n\tat org.sonar.java.ast.visitors.SubscriptionVisitor.scanTree(SubscriptionVisitor.java:78)\r\n\tat org.sonar.java.ast.visitors.SubscriptionVisitor.scanFile(SubscriptionVisitor.java:64)\r\n\tat org.sonar.java.model.VisitorsBridge.visitFile(VisitorsBridge.java:120)\r\n\tat org.sonar.java.ast.JavaAstScanner.simpleScan(JavaAstScanner.java:84)\r\n\r\n{code}","component":"SonarJava","component_version":"4.2"}