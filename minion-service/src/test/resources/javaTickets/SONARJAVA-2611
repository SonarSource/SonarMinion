{"description":"Because of addition of exceptional flows in MMF-895 , number of reported flows can be high when there are try-catch blocks containing lot of method invocations. Consider following example\r\n\r\n{code}\r\nabstract class A {\r\n\r\n  void test() {\r\n    Object o \u003d null;\r\n    try {\r\n      call();\r\n      call();\r\n      call();\r\n      call();\r\n    } catch (Throwable e) {\r\n      o.toString();  // Noncompliant - possible null dereference\r\n    }\r\n  }\r\n\r\n  abstract void call() throws java.io.IOException, java.lang.IllegalStateException;\r\n}\r\n{code}\r\n\r\nEach invocation of {{call}} will create 3 flows (one per declared exception in throws + one unchecked exception) totaling 12 flows for the same issue. Also nested try-catch blocks can create another multiplicative factor to number of flows per issue.\r\n\r\nWhile these flows are technically correct, they add little value for the user and are expensive to compute. \r\n\r\nh3. Ideas for solution \r\n\r\n* limit number of computed flows per issue (aka yet-another-safe-mechanism)\r\n* ignore type of exception when comparing exceptional flows\r\n* consider flows leading to same catch clause equal\r\n* just ignoring exceptions with unknown type can lead to significant reduction\r\n","component":"SonarJava","component_version":""}