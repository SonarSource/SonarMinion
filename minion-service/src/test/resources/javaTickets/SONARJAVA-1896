{"description":"In assignments, the variable expression should be evaluated before the expression.\r\n\r\nAs an example, the following code produces {{(4, 0)}}, and not {{(0, 4)}}, implied the by rule that subexpressions are evaluated left to right in Java.\r\n\r\n{code}\r\nint[] a \u003d {4,4};\r\nint b \u003d 1;\r\na[b] \u003d b \u003d 0;\r\n{code}\r\n\r\nNote that the following expression would have had the same effect:\r\n{code}\r\na[b] \u003d (b \u003d 0);\r\n{code}\r\n\r\n\r\nNote: Changing this also has impacts on LVA/DeadStore, revealing regressions (FN) on code similar to the following.\r\n{code}\r\n  void foo(boolean b1, boolean b2) {\r\n    boolean x \u003d false; // lost dead store issue (FN)\r\n    x \u003d b1 \u0026\u0026 b2; // dead store\r\n  }\r\n{code}","component":"SonarJava","component_version":"4.3"}