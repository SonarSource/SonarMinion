{"description":"Considering following idiom for closing resources, if the catch block around first call to {{close}} is empty, control flow goes to exit block even for checked exception and the second call to {{close}} in finally is not evaluated.\r\n\r\n{code}\r\n  void f() {\r\n    FileInputStream fis \u003d null;\r\n    FileOutputStream fos \u003d null;\r\n\r\n    try {\r\n      fis \u003d new FileInputStream();\r\n      fos \u003d new FileOutputStream(); // false positive raised because of emtpy catch block in finally.\r\n    } catch (IOException e) {\r\n      // log\r\n    } finally {\r\n      if (fis !\u003d null) {\r\n        try {\r\n          fis.close();\r\n        } catch (IOException e){\r\n           // when empty, fos.close() is not considered\r\n        }\r\n      }\r\n      fos.close();\r\n    }\r\n  }\r\n{code}\r\n\r\n\r\n\r\n","component":"SonarJava","component_version":"4.10"}