{"description":"In checks corresponding to rules S2437 and S2183, the method {{Long.decode()}} is used to evaluate long values of the operands from bit-wise operations.\n\nUnfortunately, the method may trigger a {{NumberFormatException}} with very large long number written in hexadecimal, For instance :\n\n- {{0xFFFF_FFFF_FFFF_FFFFL}} : only ones...\n- {{0xFFFF_FFFF_FFFF_FFFEL}} : could be used to force to zero the LSB\n- {{0x8000_0000_0000_0000L}} : could be used to force the sign bit\n- ...\n\nNote that if these long can be written and understood by the JVM, they may be larger than {{Long.MAX_LONG}} (which is in hex: {{0x7FFF_FFFF_FFFF_FFFFL}}). Moreover, they are often used as bit masks to handle particular scenarios. \n\nFor rule S2183 (_Ints and longs should not be shifted by more than their number of bits-1_), the following code should consequently not trigger exceptions:\n\n{code}\n  /** Compute the number of bytes that would be needed to encode a varint. */\n  static int varint64Size(long value) {\n    if ((value \u0026 (0xffffffffffffffffL \u003c\u003c  7)) \u003d\u003d 0) return 1;\n    if ((value \u0026 (0xffffffffffffffffL \u003c\u003c 14)) \u003d\u003d 0) return 2;\n    if ((value \u0026 (0xffffffffffffffffL \u003c\u003c 21)) \u003d\u003d 0) return 3;\n    if ((value \u0026 (0xffffffffffffffffL \u003c\u003c 28)) \u003d\u003d 0) return 4;\n    if ((value \u0026 (0xffffffffffffffffL \u003c\u003c 35)) \u003d\u003d 0) return 5;\n    if ((value \u0026 (0xffffffffffffffffL \u003c\u003c 42)) \u003d\u003d 0) return 6;\n    if ((value \u0026 (0xffffffffffffffffL \u003c\u003c 49)) \u003d\u003d 0) return 7;\n    if ((value \u0026 (0xffffffffffffffffL \u003c\u003c 56)) \u003d\u003d 0) return 8;\n    if ((value \u0026 (0xffffffffffffffffL \u003c\u003c 63)) \u003d\u003d 0) return 9;\n    return 10;\n  }\n{code}\n\nFor rule S2437 (_Silly bit operations should not be performed_), the following code should not trigger an exception:\n\n{code}\n  public void encodeLong(long l, byte ret[]){\n    l \u003d l ^ 0x8000000000000000L;\n    // do somehting ...\n  }\n{code}","component":"SonarJava","component_version":"3.1"}