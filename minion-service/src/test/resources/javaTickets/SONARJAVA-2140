{"description":"The following code will wrongly attempt to report on the binary expression within the if statement. Assuming that the value returned from the get call is still open. This is a false positive and, worst, it leads to a {{ClassCastException}} in the Locks left locked check that will fail the analysis. \r\n{code}\r\nimport java.util.concurrent.ConcurrentHashMap;\r\nimport java.util.concurrent.ConcurrentMap;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\npublic class SonarFail {\r\n\r\n    private ConcurrentMap\u003cString, ReentrantLock\u003e locks \u003d new ConcurrentHashMap\u003c\u003e();\r\n\r\n    public ReentrantLock getLock(String id) {\r\n        ReentrantLock lock \u003d locks.computeIfAbsent(id, s -\u003e new ReentrantLock());\r\n        lock.lock();\r\n        try {\r\n            if (locks.get(id) \u003d\u003d lock) {\r\n                return lock;\r\n            }\r\n            return null;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n}\r\n{code}","component":"SonarJava","component_version":"4.6"}