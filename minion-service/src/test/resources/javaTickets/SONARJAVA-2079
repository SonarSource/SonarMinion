{"description":"{code}\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.Stream;\r\n\r\nstatic class Qualifier {\r\n  static Optional\u003cQualifier\u003e getResult(String q) {\r\n    return Optional.empty();\r\n  }\r\n  private List\u003cQualifier\u003e buggy(String query) {\r\n    return Arrays\r\n      .stream(new String[] {\"foo\", \"bar\"})\r\n      .flatMap(qualifier -\u003e Qualifier.getResult(qualifier).map(Stream::of).orElseGet(Stream::empty))\r\n      .collect(Collectors.toList());\r\n  }\r\n}\r\n{code}\r\n\r\n{{Stream::empty}} return type depends on the method type parameter and thus must be infered from the call site. As a consequence it is defered but with no syntax node associated and this lead to a NPE when type is refined after resolution of the method reference.","component":"SonarJava","component_version":"4.5"}