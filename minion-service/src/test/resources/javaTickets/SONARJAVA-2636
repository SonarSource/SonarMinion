{"description":"{code}\r\npublic class App {\r\n  public class Foo\u003cF extends List\u003cObject\u003e\u003e {\r\n  }\r\n  public class Bar\u003cF extends List\u003cObject\u003e\u003e extends Foo\u003cF\u003e {\r\n  }\r\n  private \u003cF extends List\u003cObject\u003e\u003e Foo foo() {\r\n    return true ? new Bar() : new Foo\u003cList\u003cObject\u003e\u003e(); // resolving type of this expression leads to a failing invariant in LeastUpperBound computation\r\n  }\r\n}\r\n{code}\r\nresolving type of the conditional expression leads to the following stack trace : \r\n{code}\r\njava.lang.IllegalArgumentException: null\r\n\tat com.google.common.base.Preconditions.checkArgument(Preconditions.java:108) ~[guava-19.0.jar:na]\r\n\tat org.sonar.java.resolve.LeastUpperBound.leastContainingTypeArgument(LeastUpperBound.java:251) ~[classes/:na]\r\n\tat org.sonar.java.resolve.LeastUpperBound.leastContainingParameterization(LeastUpperBound.java:242) ~[classes/:na]\r\n\tat org.sonar.java.resolve.LeastUpperBound.cachedLeastUpperBound(LeastUpperBound.java:104) ~[classes/:na]\r\n\tat org.sonar.java.resolve.LeastUpperBound.lctaNoWildcard(LeastUpperBound.java:312) ~[classes/:na]\r\n....\r\n{code}","component":"SonarJava","component_version":"5.1.1"}