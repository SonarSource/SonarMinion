{"description":"FPs are potentially raised when dealing with runtime exception or errors thrown by called method.\r\n\r\nIn the following example, the constructor of the {{BufferedInputStream}} will throw an {{IllegalArgumentException}} with a buffer size {{\u003c\u003d 0}}. If it does throw the exception, then the {{FileInputStream}} opened in its parameter won\u0027t be closed. The issue would then be correct.\r\n\r\nHowever, when using a constant *non-zero positive* value as size of the buffer of the {{BufferedInputStream}}, its construction can not fail and the {{FileInputStream}} will be correctly closed, even if the next {{read()}} operation fails.\r\n\r\n{code}\r\npublic void withCatchBlock() {\r\n    InputStream inputStream \u003d null;\r\n    try {\r\n        inputStream \u003d new BufferedInputStream(new FileInputStream(\"test.txt\"), 1024); // FP telling to close the FileInputStream\r\n        inputStream.read(new byte[25]);\r\n    } catch (IOException e) {\r\n        LOGGER.error(\"Oops\", e);\r\n    } finally {\r\n        IOUtils.closeQuietly(inputStream);\r\n    }\r\n}\r\n{code}","component":"SonarJava","component_version":"5.4"}