{"description":"Those two java files : \r\n{code}\r\n  class OWNER {\r\n    class $Child {}\r\n  }\r\n{code}\r\n{code}\r\n  class OWNER$ {\r\n    class Child { }\r\n  }\r\n{code}\r\n\r\nwill end up producing the following .class files  :\r\nOWNER.class and OWNER$$Child.class\r\nOWNER$.class and OWNER$$Child.class\r\n\r\nFrom any other .class file using Child or $Child full class name is not sufficient to deduce the name of the owner class.\r\n\r\nIn other words : in OWNER$$Child : Which $ sign is the actual separator and which one is part of a class name. \r\nOne way to make this work is to try both possible owner name and see which class file is found to deduce inner class name and outer class name.\r\n\r\n\r\nThis is a bug in the BytecodeCompleter of the semantic analysis.\r\nIt impacts code using Scala code as scala compiler generates inner classes named $op$ when overloading an operator. \r\n\r\n\r\n","component":"SonarJava","component_version":"4.9"}