{"description":"Even if a method parameter is not annotated with {{@Nullable}}, we could call a method with a null parameter. In such case, any member select on that null object will trigger a {{NullPointerException}}.\r\n\r\nIf this occur within a {{try-catch}} statemen, catching {{Exception}}, then the engine +should+ not assume that the variable is necessarily not null, as the null-path is still an option till within the body of the catch.\r\n\r\n{code}\r\nabstract class A {\r\n\r\n  public A foo(A a) {\r\n    try {\r\n      a.toString(); // if \u0027a\u0027 is null, it\u0027s going to branch to Exception\r\n      return a;\r\n    } catch (MyRunTimeException e) {\r\n      return foo();\r\n    } catch (Exception e) {\r\n      String data \u003d a !\u003d null ? a.toString() : null;\r\n//                  ^^^^^^^^^ FP S2583 condition always true\r\n      System.out.println(data);\r\n      return foo();\r\n    }\r\n  }\r\n\r\n  abstract void verify() throws MyRunTimeException;\r\n  abstract A foo();\r\n  public static class MyRunTimeException extends RuntimeException {  }\r\n}\r\n{code}","component":"SonarJava","component_version":"5.4"}