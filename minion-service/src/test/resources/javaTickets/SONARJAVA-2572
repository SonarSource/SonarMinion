{"description":"With a big pojo like : \r\n{code}\r\nclass A {\r\n Integer i0;\r\n// ...\r\n Integer i119;\r\n\r\n public boolean equals(Object object) {\r\n        if (this \u003d\u003d object) return true;\r\n        if (object \u003d\u003d null || getClass() !\u003d object.getClass()) return false;\r\n        if (!super.equals(object)) return false;\r\n\r\n        ExceedTransitiveLimit that \u003d (ExceedTransitiveLimit) object;\r\n\r\n        if (i0 !\u003d null ? !i0.equals(that.i0) : that.i0 !\u003d null) return false;\r\n// ... \r\n        if (i119 !\u003d null ? !i119.equals(that.i119) : that.i119 !\u003d null) return false;\r\n    \r\n}\r\n}\r\n{code}\r\n\r\nThe equals/hashcode generated method will generate a huge amount of relationships that ought to be tested with each others to deduce transitive one (regarding null symbolic value especially). \r\n\r\nThis is not taken into account by the safe mechanism of transitive relationship which should detect that the combination is exploding and stop the se engine. \r\n","component":"SonarJava","component_version":"5.0"}